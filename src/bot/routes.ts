import type { Context } from 'telegraf';

import { createButton, createRoute } from './router/factories';

export type RoutesApi = {
  exportData: (ctx: Context) => Promise<void> | void;
  resetMemory: (ctx: Context) => Promise<void> | void;
  requestChatAccess: (ctx: Context) => Promise<void> | void;
  requestUserAccess: (ctx: Context) => Promise<void> | void;
  listChats: () => Promise<{ chatId: number }[]>;
  getChatTitle: (chatId: number) => Promise<string>;
  getChatStatus: (chatId: number) => Promise<string>;
};

const menu = createRoute<RoutesApi>('menu', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', () => ({
  buttons: [
    createButton<RoutesApi>('üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', (a, ctx) =>
      a.exportData(ctx)
    ),
    createButton<RoutesApi>('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–∞–º—è—Ç—å', (a, ctx) =>
      a.resetMemory(ctx)
    ),
  ],
}));

const admin_menu = createRoute<RoutesApi>(
  'admin_menu',
  '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
  () => ({
    buttons: [
      createButton<RoutesApi>('üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', (a, ctx) =>
        a.exportData(ctx)
      ),
      createButton<RoutesApi>('üí¨ –ß–∞—Ç—ã', (a, ctx) =>
        a.show(ctx, 'admin_chats')
      ),
    ],
  })
);

const chat_not_approved = createRoute<RoutesApi>(
  'chat_not_approved',
  '–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.',
  () => ({
    buttons: [
      createButton<RoutesApi>('–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø', (a, ctx) =>
        a.requestChatAccess(ctx)
      ),
    ],
  })
);

const no_access = createRoute<RoutesApi>(
  'no_access',
  '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø.',
  () => ({
    buttons: [
      createButton<RoutesApi>('üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø', (a, ctx) =>
        a.requestUserAccess(ctx)
      ),
    ],
  })
);

export const admin_chats = createRoute<RoutesApi>(
  'admin_chats',
  '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:',
  async (api, ctx: Context) => {
    const chats = await api.listChats();
    if (chats.length === 0) {
      await ctx.reply('–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      return { buttons: [] };
    }
    const buttons = await Promise.all(
      chats.map(async ({ chatId }) => {
        const title = await api.getChatTitle(chatId);
        return createButton<RoutesApi>(
          `${title} (${chatId})`,
          async (a, bCtx) => {
            const status = await a.getChatStatus(chatId);
            await bCtx.reply(`–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ ${chatId}: ${status}`, {
              reply_markup: {
                inline_keyboard: [
                  [
                    status === 'banned'
                      ? {
                          text: '–†–∞–∑–±–∞–Ω–∏—Ç—å',
                          callback_data: `chat_unban:${chatId}`,
                        }
                      : {
                          text: '–ó–∞–±–∞–Ω–∏—Ç—å',
                          callback_data: `chat_ban:${chatId}`,
                        },
                  ],
                ],
              },
            });
          }
        );
      })
    );
    return { buttons };
  }
);

export const routes = [
  menu,
  admin_menu,
  chat_not_approved,
  no_access,
  admin_chats,
];
